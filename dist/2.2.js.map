{"version":3,"sources":["webpack:///2.2.js","webpack:///./~/.0.1.3@html5-image-compress/src/libs/jpeg_encoder_basic.js"],"names":["webpackJsonp","696","module","exports","__webpack_require__","JPEGEncoder","quality","initQuantTables","sf","YQT","i","t","ffloor","YTable","ZigZag","UVQT","j","u","UVTable","aasf","k","row","col","fdtbl_Y","fdtbl_UV","computeHuffmanTbl","nrcodes","std_table","codevalue","pos_in_table","HT","Array","initHuffmanTbl","YDC_HT","std_dc_luminance_nrcodes","std_dc_luminance_values","UVDC_HT","std_dc_chrominance_nrcodes","std_dc_chrominance_values","YAC_HT","std_ac_luminance_nrcodes","std_ac_luminance_values","UVAC_HT","std_ac_chrominance_nrcodes","std_ac_chrominance_values","initCategoryNumber","nrlower","nrupper","cat","nr","category","bitcode","nrneg","initRGBYUVTable","RGB_YUV_TABLE","writeBits","bs","value","posval","bytenew","bytepos","writeByte","byteout","push","clt","writeWord","fDCTQuant","data","fdtbl","d0","d1","d2","d3","d4","d5","d6","d7","dataOff","I8","I64","tmp0","tmp7","tmp1","tmp6","tmp2","tmp5","tmp3","tmp4","tmp10","tmp13","tmp11","tmp12","z1","z5","z2","z4","z3","z11","z13","tmp0p2","tmp7p2","tmp1p2","tmp6p2","tmp2p2","tmp5p2","tmp3p2","tmp4p2","tmp10p2","tmp13p2","tmp11p2","tmp12p2","z1p2","z5p2","z2p2","z4p2","z3p2","z11p2","z13p2","outputfDCTQuant","writeAPP0","writeSOF0","width","height","writeDQT","writeDHT","l","m","n","o","p","writeSOS","processDU","CDU","DC","HTDC","HTAC","pos","EOB","M16zeroes","I16","I63","DU_DCT","DU","Diff","end0pos","lng","startpos","nrzeroes","nrmarker","initCharLookupTable","sfcc","String","fromCharCode","setQuality","currentQuality","Math","floor","console","log","init","time_start","Date","getTime","duration","round","YDU","UDU","VDU","this","encode","image","toRaw","DCY","DCU","DCV","displayName","x","r","g","b","start","imageData","quadWidth","y","fillbits","len","length","Uint8Array","charCodeAt","jpegDataUri","btoa","join","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","apply","undefined"],"mappings":"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","file":"2.2.js?v=fb5f58f6093cfaae2ffa","sourcesContent":["webpackJsonp([2],{\n\n/***/ 696:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\t\n\t  Basic GUI blocking jpeg encoder ported to JavaScript and optimized by\n\t  Andreas Ritter, www.bytestrom.eu, 11/2009.\n\t\n\t  Example usage is given at the bottom of this file.\n\t\n\t  ---------\n\t\n\t  Copyright (c) 2008, Adobe Systems Incorporated\n\t  All rights reserved.\n\t\n\t  Redistribution and use in source and binary forms, with or without\n\t  modification, are permitted provided that the following conditions are\n\t  met:\n\t\n\t  * Redistributions of source code must retain the above copyright notice,\n\t    this list of conditions and the following disclaimer.\n\t\n\t  * Redistributions in binary form must reproduce the above copyright\n\t    notice, this list of conditions and the following disclaimer in the\n\t    documentation and/or other materials provided with the distribution.\n\t\n\t  * Neither the name of Adobe Systems Incorporated nor the names of its\n\t    contributors may be used to endorse or promote products derived from\n\t    this software without specific prior written permission.\n\t\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n\t  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\t  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\t  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\t  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\t  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\t  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n\t  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n\t  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\t  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\t  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\t\n\tfunction JPEGEncoder(quality) {\n\t  var self = this;\n\t    var fround = Math.round;\n\t    var ffloor = Math.floor;\n\t    var YTable = new Array(64);\n\t    var UVTable = new Array(64);\n\t    var fdtbl_Y = new Array(64);\n\t    var fdtbl_UV = new Array(64);\n\t    var YDC_HT;\n\t    var UVDC_HT;\n\t    var YAC_HT;\n\t    var UVAC_HT;\n\t\n\t    var bitcode = new Array(65535);\n\t    var category = new Array(65535);\n\t    var outputfDCTQuant = new Array(64);\n\t    var DU = new Array(64);\n\t    var byteout = [];\n\t    var bytenew = 0;\n\t    var bytepos = 7;\n\t\n\t    var YDU = new Array(64);\n\t    var UDU = new Array(64);\n\t    var VDU = new Array(64);\n\t    var clt = new Array(256);\n\t    var RGB_YUV_TABLE = new Array(2048);\n\t    var currentQuality;\n\t\n\t    var ZigZag = [\n\t             0, 1, 5, 6,14,15,27,28,\n\t             2, 4, 7,13,16,26,29,42,\n\t             3, 8,12,17,25,30,41,43,\n\t             9,11,18,24,31,40,44,53,\n\t            10,19,23,32,39,45,52,54,\n\t            20,22,33,38,46,51,55,60,\n\t            21,34,37,47,50,56,59,61,\n\t            35,36,48,49,57,58,62,63\n\t        ];\n\t\n\t    var std_dc_luminance_nrcodes = [0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0];\n\t    var std_dc_luminance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n\t    var std_ac_luminance_nrcodes = [0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,0x7d];\n\t    var std_ac_luminance_values = [\n\t            0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,\n\t            0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,\n\t            0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,\n\t            0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,\n\t            0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,\n\t            0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,\n\t            0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,\n\t            0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,\n\t            0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,\n\t            0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,\n\t            0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,\n\t            0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,\n\t            0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,\n\t            0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,\n\t            0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,\n\t            0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,\n\t            0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,\n\t            0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,\n\t            0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,\n\t            0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n\t            0xf9,0xfa\n\t        ];\n\t\n\t    var std_dc_chrominance_nrcodes = [0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0];\n\t    var std_dc_chrominance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n\t    var std_ac_chrominance_nrcodes = [0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,0x77];\n\t    var std_ac_chrominance_values = [\n\t            0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,\n\t            0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,\n\t            0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,\n\t            0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,\n\t            0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,\n\t            0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,\n\t            0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,\n\t            0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,\n\t            0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,\n\t            0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,\n\t            0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,\n\t            0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,\n\t            0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,\n\t            0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,\n\t            0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,\n\t            0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,\n\t            0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,\n\t            0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,\n\t            0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,\n\t            0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n\t            0xf9,0xfa\n\t        ];\n\t\n\t    function initQuantTables(sf){\n\t            var YQT = [\n\t                16, 11, 10, 16, 24, 40, 51, 61,\n\t                12, 12, 14, 19, 26, 58, 60, 55,\n\t                14, 13, 16, 24, 40, 57, 69, 56,\n\t                14, 17, 22, 29, 51, 87, 80, 62,\n\t                18, 22, 37, 56, 68,109,103, 77,\n\t                24, 35, 55, 64, 81,104,113, 92,\n\t                49, 64, 78, 87,103,121,120,101,\n\t                72, 92, 95, 98,112,100,103, 99\n\t            ];\n\t\n\t            for (var i = 0; i < 64; i++) {\n\t                var t = ffloor((YQT[i]*sf+50)/100);\n\t                if (t < 1) {\n\t                    t = 1;\n\t                } else if (t > 255) {\n\t                    t = 255;\n\t                }\n\t                YTable[ZigZag[i]] = t;\n\t            }\n\t            var UVQT = [\n\t                17, 18, 24, 47, 99, 99, 99, 99,\n\t                18, 21, 26, 66, 99, 99, 99, 99,\n\t                24, 26, 56, 99, 99, 99, 99, 99,\n\t                47, 66, 99, 99, 99, 99, 99, 99,\n\t                99, 99, 99, 99, 99, 99, 99, 99,\n\t                99, 99, 99, 99, 99, 99, 99, 99,\n\t                99, 99, 99, 99, 99, 99, 99, 99,\n\t                99, 99, 99, 99, 99, 99, 99, 99\n\t            ];\n\t            for (var j = 0; j < 64; j++) {\n\t                var u = ffloor((UVQT[j]*sf+50)/100);\n\t                if (u < 1) {\n\t                    u = 1;\n\t                } else if (u > 255) {\n\t                    u = 255;\n\t                }\n\t                UVTable[ZigZag[j]] = u;\n\t            }\n\t            var aasf = [\n\t                1.0, 1.387039845, 1.306562965, 1.175875602,\n\t                1.0, 0.785694958, 0.541196100, 0.275899379\n\t            ];\n\t            var k = 0;\n\t            for (var row = 0; row < 8; row++)\n\t            {\n\t                for (var col = 0; col < 8; col++)\n\t                {\n\t                    fdtbl_Y[k]  = (1.0 / (YTable [ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n\t                    fdtbl_UV[k] = (1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n\t                    k++;\n\t                }\n\t            }\n\t        }\n\t\n\t        function computeHuffmanTbl(nrcodes, std_table){\n\t            var codevalue = 0;\n\t            var pos_in_table = 0;\n\t            var HT = new Array();\n\t            for (var k = 1; k <= 16; k++) {\n\t                for (var j = 1; j <= nrcodes[k]; j++) {\n\t                    HT[std_table[pos_in_table]] = [];\n\t                    HT[std_table[pos_in_table]][0] = codevalue;\n\t                    HT[std_table[pos_in_table]][1] = k;\n\t                    pos_in_table++;\n\t                    codevalue++;\n\t                }\n\t                codevalue*=2;\n\t            }\n\t            return HT;\n\t        }\n\t\n\t        function initHuffmanTbl()\n\t        {\n\t            YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes,std_dc_luminance_values);\n\t            UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes,std_dc_chrominance_values);\n\t            YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes,std_ac_luminance_values);\n\t            UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes,std_ac_chrominance_values);\n\t        }\n\t\n\t        function initCategoryNumber()\n\t        {\n\t            var nrlower = 1;\n\t            var nrupper = 2;\n\t            for (var cat = 1; cat <= 15; cat++) {\n\t                //Positive numbers\n\t                for (var nr = nrlower; nr<nrupper; nr++) {\n\t                    category[32767+nr] = cat;\n\t                    bitcode[32767+nr] = [];\n\t                    bitcode[32767+nr][1] = cat;\n\t                    bitcode[32767+nr][0] = nr;\n\t                }\n\t                //Negative numbers\n\t                for (var nrneg =-(nrupper-1); nrneg<=-nrlower; nrneg++) {\n\t                    category[32767+nrneg] = cat;\n\t                    bitcode[32767+nrneg] = [];\n\t                    bitcode[32767+nrneg][1] = cat;\n\t                    bitcode[32767+nrneg][0] = nrupper-1+nrneg;\n\t                }\n\t                nrlower <<= 1;\n\t                nrupper <<= 1;\n\t            }\n\t        }\n\t\n\t        function initRGBYUVTable() {\n\t            for(var i = 0; i < 256;i++) {\n\t                RGB_YUV_TABLE[i]              =  19595 * i;\n\t                RGB_YUV_TABLE[(i+ 256)>>0]     =  38470 * i;\n\t                RGB_YUV_TABLE[(i+ 512)>>0]     =   7471 * i + 0x8000;\n\t                RGB_YUV_TABLE[(i+ 768)>>0]     = -11059 * i;\n\t                RGB_YUV_TABLE[(i+1024)>>0]     = -21709 * i;\n\t                RGB_YUV_TABLE[(i+1280)>>0]     =  32768 * i + 0x807FFF;\n\t                RGB_YUV_TABLE[(i+1536)>>0]     = -27439 * i;\n\t                RGB_YUV_TABLE[(i+1792)>>0]     = - 5329 * i;\n\t            }\n\t        }\n\t\n\t        // IO functions\n\t        function writeBits(bs)\n\t        {\n\t            var value = bs[0];\n\t            var posval = bs[1]-1;\n\t            while ( posval >= 0 ) {\n\t                if (value & (1 << posval) ) {\n\t                    bytenew |= (1 << bytepos);\n\t                }\n\t                posval--;\n\t                bytepos--;\n\t                if (bytepos < 0) {\n\t                    if (bytenew == 0xFF) {\n\t                        writeByte(0xFF);\n\t                        writeByte(0);\n\t                    }\n\t                    else {\n\t                        writeByte(bytenew);\n\t                    }\n\t                    bytepos=7;\n\t                    bytenew=0;\n\t                }\n\t            }\n\t        }\n\t\n\t        function writeByte(value)\n\t        {\n\t            byteout.push(clt[value]); // write char directly instead of converting later\n\t        }\n\t\n\t        function writeWord(value)\n\t        {\n\t            writeByte((value>>8)&0xFF);\n\t            writeByte((value   )&0xFF);\n\t        }\n\t\n\t        // DCT & quantization core\n\t        function fDCTQuant(data, fdtbl)\n\t        {\n\t            var d0, d1, d2, d3, d4, d5, d6, d7;\n\t            /* Pass 1: process rows. */\n\t            var dataOff=0;\n\t            var i;\n\t            const I8 = 8;\n\t            const I64 = 64;\n\t            for (i=0; i<I8; ++i)\n\t            {\n\t                d0 = data[dataOff];\n\t                d1 = data[dataOff+1];\n\t                d2 = data[dataOff+2];\n\t                d3 = data[dataOff+3];\n\t                d4 = data[dataOff+4];\n\t                d5 = data[dataOff+5];\n\t                d6 = data[dataOff+6];\n\t                d7 = data[dataOff+7];\n\t\n\t                var tmp0 = d0 + d7;\n\t                var tmp7 = d0 - d7;\n\t                var tmp1 = d1 + d6;\n\t                var tmp6 = d1 - d6;\n\t                var tmp2 = d2 + d5;\n\t                var tmp5 = d2 - d5;\n\t                var tmp3 = d3 + d4;\n\t                var tmp4 = d3 - d4;\n\t\n\t                /* Even part */\n\t                var tmp10 = tmp0 + tmp3;    /* phase 2 */\n\t                var tmp13 = tmp0 - tmp3;\n\t                var tmp11 = tmp1 + tmp2;\n\t                var tmp12 = tmp1 - tmp2;\n\t\n\t                data[dataOff] = tmp10 + tmp11; /* phase 3 */\n\t                data[dataOff+4] = tmp10 - tmp11;\n\t\n\t                var z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */\n\t                data[dataOff+2] = tmp13 + z1; /* phase 5 */\n\t                data[dataOff+6] = tmp13 - z1;\n\t\n\t                /* Odd part */\n\t                tmp10 = tmp4 + tmp5; /* phase 2 */\n\t                tmp11 = tmp5 + tmp6;\n\t                tmp12 = tmp6 + tmp7;\n\t\n\t                /* The rotator is modified from fig 4-8 to avoid extra negations. */\n\t                var z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */\n\t                var z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */\n\t                var z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */\n\t                var z3 = tmp11 * 0.707106781; /* c4 */\n\t\n\t                var z11 = tmp7 + z3;    /* phase 5 */\n\t                var z13 = tmp7 - z3;\n\t\n\t                data[dataOff+5] = z13 + z2;    /* phase 6 */\n\t                data[dataOff+3] = z13 - z2;\n\t                data[dataOff+1] = z11 + z4;\n\t                data[dataOff+7] = z11 - z4;\n\t\n\t                dataOff += 8; /* advance pointer to next row */\n\t            }\n\t\n\t            /* Pass 2: process columns. */\n\t            dataOff = 0;\n\t            for (i=0; i<I8; ++i)\n\t            {\n\t                d0 = data[dataOff];\n\t                d1 = data[dataOff + 8];\n\t                d2 = data[dataOff + 16];\n\t                d3 = data[dataOff + 24];\n\t                d4 = data[dataOff + 32];\n\t                d5 = data[dataOff + 40];\n\t                d6 = data[dataOff + 48];\n\t                d7 = data[dataOff + 56];\n\t\n\t                var tmp0p2 = d0 + d7;\n\t                var tmp7p2 = d0 - d7;\n\t                var tmp1p2 = d1 + d6;\n\t                var tmp6p2 = d1 - d6;\n\t                var tmp2p2 = d2 + d5;\n\t                var tmp5p2 = d2 - d5;\n\t                var tmp3p2 = d3 + d4;\n\t                var tmp4p2 = d3 - d4;\n\t\n\t                /* Even part */\n\t                var tmp10p2 = tmp0p2 + tmp3p2;    /* phase 2 */\n\t                var tmp13p2 = tmp0p2 - tmp3p2;\n\t                var tmp11p2 = tmp1p2 + tmp2p2;\n\t                var tmp12p2 = tmp1p2 - tmp2p2;\n\t\n\t                data[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */\n\t                data[dataOff+32] = tmp10p2 - tmp11p2;\n\t\n\t                var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */\n\t                data[dataOff+16] = tmp13p2 + z1p2; /* phase 5 */\n\t                data[dataOff+48] = tmp13p2 - z1p2;\n\t\n\t                /* Odd part */\n\t                tmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */\n\t                tmp11p2 = tmp5p2 + tmp6p2;\n\t                tmp12p2 = tmp6p2 + tmp7p2;\n\t\n\t                /* The rotator is modified from fig 4-8 to avoid extra negations. */\n\t                var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */\n\t                var z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */\n\t                var z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */\n\t                var z3p2 = tmp11p2 * 0.707106781; /* c4 */\n\t                var z11p2 = tmp7p2 + z3p2;    /* phase 5 */\n\t                var z13p2 = tmp7p2 - z3p2;\n\t\n\t                data[dataOff+40] = z13p2 + z2p2; /* phase 6 */\n\t                data[dataOff+24] = z13p2 - z2p2;\n\t                data[dataOff+ 8] = z11p2 + z4p2;\n\t                data[dataOff+56] = z11p2 - z4p2;\n\t\n\t                dataOff++; /* advance pointer to next column */\n\t            }\n\t\n\t            // Quantize/descale the coefficients\n\t            var fDCTQuant;\n\t            for (i=0; i<I64; ++i)\n\t            {\n\t                // Apply the quantization and scaling factor & Round to nearest integer\n\t                fDCTQuant = data[i]*fdtbl[i];\n\t                outputfDCTQuant[i] = (fDCTQuant > 0.0) ? ((fDCTQuant + 0.5)|0) : ((fDCTQuant - 0.5)|0);\n\t                //outputfDCTQuant[i] = fround(fDCTQuant);\n\t\n\t            }\n\t            return outputfDCTQuant;\n\t        }\n\t\n\t        function writeAPP0()\n\t        {\n\t            writeWord(0xFFE0); // marker\n\t            writeWord(16); // length\n\t            writeByte(0x4A); // J\n\t            writeByte(0x46); // F\n\t            writeByte(0x49); // I\n\t            writeByte(0x46); // F\n\t            writeByte(0); // = \"JFIF\",'\\0'\n\t            writeByte(1); // versionhi\n\t            writeByte(1); // versionlo\n\t            writeByte(0); // xyunits\n\t            writeWord(1); // xdensity\n\t            writeWord(1); // ydensity\n\t            writeByte(0); // thumbnwidth\n\t            writeByte(0); // thumbnheight\n\t        }\n\t\n\t        function writeSOF0(width, height)\n\t        {\n\t            writeWord(0xFFC0); // marker\n\t            writeWord(17);   // length, truecolor YUV JPG\n\t            writeByte(8);    // precision\n\t            writeWord(height);\n\t            writeWord(width);\n\t            writeByte(3);    // nrofcomponents\n\t            writeByte(1);    // IdY\n\t            writeByte(0x11); // HVY\n\t            writeByte(0);    // QTY\n\t            writeByte(2);    // IdU\n\t            writeByte(0x11); // HVU\n\t            writeByte(1);    // QTU\n\t            writeByte(3);    // IdV\n\t            writeByte(0x11); // HVV\n\t            writeByte(1);    // QTV\n\t        }\n\t\n\t        function writeDQT()\n\t        {\n\t            writeWord(0xFFDB); // marker\n\t            writeWord(132);       // length\n\t            writeByte(0);\n\t            for (var i=0; i<64; i++) {\n\t                writeByte(YTable[i]);\n\t            }\n\t            writeByte(1);\n\t            for (var j=0; j<64; j++) {\n\t                writeByte(UVTable[j]);\n\t            }\n\t        }\n\t\n\t        function writeDHT()\n\t        {\n\t            writeWord(0xFFC4); // marker\n\t            writeWord(0x01A2); // length\n\t\n\t            writeByte(0); // HTYDCinfo\n\t            for (var i=0; i<16; i++) {\n\t                writeByte(std_dc_luminance_nrcodes[i+1]);\n\t            }\n\t            for (var j=0; j<=11; j++) {\n\t                writeByte(std_dc_luminance_values[j]);\n\t            }\n\t\n\t            writeByte(0x10); // HTYACinfo\n\t            for (var k=0; k<16; k++) {\n\t                writeByte(std_ac_luminance_nrcodes[k+1]);\n\t            }\n\t            for (var l=0; l<=161; l++) {\n\t                writeByte(std_ac_luminance_values[l]);\n\t            }\n\t\n\t            writeByte(1); // HTUDCinfo\n\t            for (var m=0; m<16; m++) {\n\t                writeByte(std_dc_chrominance_nrcodes[m+1]);\n\t            }\n\t            for (var n=0; n<=11; n++) {\n\t                writeByte(std_dc_chrominance_values[n]);\n\t            }\n\t\n\t            writeByte(0x11); // HTUACinfo\n\t            for (var o=0; o<16; o++) {\n\t                writeByte(std_ac_chrominance_nrcodes[o+1]);\n\t            }\n\t            for (var p=0; p<=161; p++) {\n\t                writeByte(std_ac_chrominance_values[p]);\n\t            }\n\t        }\n\t\n\t        function writeSOS()\n\t        {\n\t            writeWord(0xFFDA); // marker\n\t            writeWord(12); // length\n\t            writeByte(3); // nrofcomponents\n\t            writeByte(1); // IdY\n\t            writeByte(0); // HTY\n\t            writeByte(2); // IdU\n\t            writeByte(0x11); // HTU\n\t            writeByte(3); // IdV\n\t            writeByte(0x11); // HTV\n\t            writeByte(0); // Ss\n\t            writeByte(0x3f); // Se\n\t            writeByte(0); // Bf\n\t        }\n\t\n\t        function processDU(CDU, fdtbl, DC, HTDC, HTAC){\n\t            var EOB = HTAC[0x00];\n\t            var M16zeroes = HTAC[0xF0];\n\t            var pos;\n\t            const I16 = 16;\n\t            const I63 = 63;\n\t            const I64 = 64;\n\t            var DU_DCT = fDCTQuant(CDU, fdtbl);\n\t            //ZigZag reorder\n\t            for (var j=0;j<I64;++j) {\n\t                DU[ZigZag[j]]=DU_DCT[j];\n\t            }\n\t            var Diff = DU[0] - DC; DC = DU[0];\n\t            //Encode DC\n\t            if (Diff==0) {\n\t                writeBits(HTDC[0]); // Diff might be 0\n\t            } else {\n\t                pos = 32767+Diff;\n\t                writeBits(HTDC[category[pos]]);\n\t                writeBits(bitcode[pos]);\n\t            }\n\t            //Encode ACs\n\t            var end0pos = 63; // was const... which is crazy\n\t            for (; (end0pos>0)&&(DU[end0pos]==0); end0pos--) {};\n\t            //end0pos = first element in reverse order !=0\n\t            if ( end0pos == 0) {\n\t                writeBits(EOB);\n\t                return DC;\n\t            }\n\t            var i = 1;\n\t            var lng;\n\t            while ( i <= end0pos ) {\n\t                var startpos = i;\n\t                for (; (DU[i]==0) && (i<=end0pos); ++i) {}\n\t                var nrzeroes = i-startpos;\n\t                if ( nrzeroes >= I16 ) {\n\t                    lng = nrzeroes>>4;\n\t                    for (var nrmarker=1; nrmarker <= lng; ++nrmarker)\n\t                        writeBits(M16zeroes);\n\t                    nrzeroes = nrzeroes&0xF;\n\t                }\n\t                pos = 32767+DU[i];\n\t                writeBits(HTAC[(nrzeroes<<4)+category[pos]]);\n\t                writeBits(bitcode[pos]);\n\t                i++;\n\t            }\n\t            if ( end0pos != I63 ) {\n\t                writeBits(EOB);\n\t            }\n\t            return DC;\n\t        }\n\t\n\t        function initCharLookupTable(){\n\t            var sfcc = String.fromCharCode;\n\t            for(var i=0; i < 256; i++){ ///// ACHTUNG // 255\n\t                clt[i] = sfcc(i);\n\t            }\n\t        }\n\t\n\t        this.encode = function(image,quality,toRaw) // image data object\n\t        {\n\t            var time_start = new Date().getTime();\n\t\n\t            if(quality) setQuality(quality);\n\t\n\t            // Initialize bit writer\n\t            byteout = new Array();\n\t            bytenew=0;\n\t            bytepos=7;\n\t\n\t            // Add JPEG headers\n\t            writeWord(0xFFD8); // SOI\n\t            writeAPP0();\n\t            writeDQT();\n\t            writeSOF0(image.width,image.height);\n\t            writeDHT();\n\t            writeSOS();\n\t\n\t            // Encode 8x8 macroblocks\n\t            var DCY=0;\n\t            var DCU=0;\n\t            var DCV=0;\n\t\n\t            bytenew=0;\n\t            bytepos=7;\n\t\n\t            this.encode.displayName = \"_encode_\";\n\t\n\t            var imageData = image.data;\n\t            var width = image.width;\n\t            var height = image.height;\n\t\n\t            var quadWidth = width*4;\n\t            var tripleWidth = width*3;\n\t\n\t            var x, y = 0;\n\t            var r, g, b;\n\t            var start,p, col,row,pos;\n\t            while(y < height){\n\t                x = 0;\n\t                while(x < quadWidth){\n\t                start = quadWidth * y + x;\n\t                p = start;\n\t                col = -1;\n\t                row = 0;\n\t\n\t                for(pos=0; pos < 64; pos++){\n\t                    row = pos >> 3;// /8\n\t                    col = ( pos & 7 ) * 4; // %8\n\t                    p = start + ( row * quadWidth ) + col;\n\t\n\t                    if(y+row >= height){ // padding bottom\n\t                        p-= (quadWidth*(y+1+row-height));\n\t                    }\n\t\n\t                    if(x+col >= quadWidth){ // padding right\n\t                        p-= ((x+col) - quadWidth +4)\n\t                    }\n\t\n\t                    r = imageData[ p++ ];\n\t                    g = imageData[ p++ ];\n\t                    b = imageData[ p++ ];\n\t\n\t                    /* // calculate YUV values dynamically\n\t                    YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80\n\t                    UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));\n\t                    VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));\n\t                    */\n\t\n\t                    // use lookup table (slightly faster)\n\t                    YDU[pos] = ((RGB_YUV_TABLE[r]             + RGB_YUV_TABLE[(g +  256)>>0] + RGB_YUV_TABLE[(b +  512)>>0]) >> 16)-128;\n\t                    UDU[pos] = ((RGB_YUV_TABLE[(r +  768)>>0] + RGB_YUV_TABLE[(g + 1024)>>0] + RGB_YUV_TABLE[(b + 1280)>>0]) >> 16)-128;\n\t                    VDU[pos] = ((RGB_YUV_TABLE[(r + 1280)>>0] + RGB_YUV_TABLE[(g + 1536)>>0] + RGB_YUV_TABLE[(b + 1792)>>0]) >> 16)-128;\n\t\n\t                }\n\t\n\t                DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);\n\t                DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);\n\t                DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);\n\t                x+=32;\n\t                }\n\t                y+=8;\n\t            }\n\t\n\t            ////////////////////////////////////////////////////////////////\n\t\n\t            // Do the bit alignment of the EOI marker\n\t            if ( bytepos >= 0 ) {\n\t                var fillbits = [];\n\t                fillbits[1] = bytepos+1;\n\t                fillbits[0] = (1<<(bytepos+1))-1;\n\t                writeBits(fillbits);\n\t            }\n\t\n\t            writeWord(0xFFD9); //EOI\n\t\n\t            if(toRaw) {\n\t                var len = byteout.length;\n\t                var data = new Uint8Array(len);\n\t\n\t                for (var i=0; i<len; i++ ) {\n\t                    data[i] = byteout[i].charCodeAt();\n\t                }\n\t\n\t                //cleanup\n\t                byteout = [];\n\t\n\t                // benchmarking\n\t                var duration = new Date().getTime() - time_start;\n\t                console.log('Encoding time: '+ duration + 'ms');\n\t\n\t                return data;\n\t            }\n\t\n\t            var jpegDataUri = 'data:image/jpeg;base64,' + btoa(byteout.join(''));\n\t\n\t            byteout = [];\n\t\n\t            // benchmarking\n\t            var duration = new Date().getTime() - time_start;\n\t            console.log('Encoding time: '+ duration + 'ms');\n\t\n\t            return jpegDataUri\n\t    }\n\t\n\t    function setQuality(quality){\n\t        if (quality <= 0) {\n\t            quality = 1;\n\t        }\n\t        if (quality > 100) {\n\t            quality = 100;\n\t        }\n\t\n\t        if(currentQuality == quality) return // don't recalc if unchanged\n\t\n\t        var sf = 0;\n\t        if (quality < 50) {\n\t            sf = Math.floor(5000 / quality);\n\t        } else {\n\t            sf = Math.floor(200 - quality*2);\n\t        }\n\t\n\t        initQuantTables(sf);\n\t        currentQuality = quality;\n\t        console.log('Quality set to: '+quality +'%');\n\t    }\n\t\n\t    function init(){\n\t        var time_start = new Date().getTime();\n\t        if(!quality) quality = 50;\n\t        // Create tables\n\t        initCharLookupTable()\n\t        initHuffmanTbl();\n\t        initCategoryNumber();\n\t        initRGBYUVTable();\n\t\n\t        setQuality(quality);\n\t        var duration = new Date().getTime() - time_start;\n\t        console.log('Initialization '+ duration + 'ms');\n\t    }\n\t\n\t    init();\n\t\n\t};\n\t\n\t/* Example usage. Quality is an int in the range [0, 100]\n\tfunction example(quality){\n\t    // Pass in an existing image from the page\n\t    var theImg = document.getElementById('testimage');\n\t    // Use a canvas to extract the raw image data\n\t    var cvs = document.createElement('canvas');\n\t    cvs.width = theImg.width;\n\t    cvs.height = theImg.height;\n\t    var ctx = cvs.getContext(\"2d\");\n\t    ctx.drawImage(theImg,0,0);\n\t    var theImgData = (ctx.getImageData(0, 0, cvs.width, cvs.height));\n\t    // Encode the image and get a URI back, toRaw is false by default\n\t    var jpegURI = encoder.encode(theImgData, quality);\n\t    var img = document.createElement('img');\n\t    img.src = jpegURI;\n\t    document.body.appendChild(img);\n\t}\n\t\n\tExample usage for getting back raw data and transforming it to a blob.\n\tRaw data is useful when trying to send an image over XHR or Websocket,\n\tit uses around 30% less bytes then a Base64 encoded string. It can\n\talso be useful if you want to save the image to disk using a FileWriter.\n\t\n\tNOTE: The browser you are using must support Blobs\n\tfunction example(quality){\n\t    // Pass in an existing image from the page\n\t    var theImg = document.getElementById('testimage');\n\t    // Use a canvas to extract the raw image data\n\t    var cvs = document.createElement('canvas');\n\t    cvs.width = theImg.width;\n\t    cvs.height = theImg.height;\n\t    var ctx = cvs.getContext(\"2d\");\n\t    ctx.drawImage(theImg,0,0);\n\t    var theImgData = (ctx.getImageData(0, 0, cvs.width, cvs.height));\n\t    // Encode the image and get a URI back, set toRaw to true\n\t    var rawData = encoder.encode(theImgData, quality, true);\n\t\n\t    blob = new Blob([rawData.buffer], {type: 'image/jpeg'});\n\t    var jpegURI = URL.createObjectURL(blob);\n\t\n\t    var img = document.createElement('img');\n\t    img.src = jpegURI;\n\t    document.body.appendChild(img);\n\t}*/\n\t\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return JPEGEncoder; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// 2.2.js?v=fb5f58f6093cfaae2ffa","/*\n\n  Basic GUI blocking jpeg encoder ported to JavaScript and optimized by\n  Andreas Ritter, www.bytestrom.eu, 11/2009.\n\n  Example usage is given at the bottom of this file.\n\n  ---------\n\n  Copyright (c) 2008, Adobe Systems Incorporated\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are\n  met:\n\n  * Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n  * Neither the name of Adobe Systems Incorporated nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\nfunction JPEGEncoder(quality) {\n  var self = this;\n    var fround = Math.round;\n    var ffloor = Math.floor;\n    var YTable = new Array(64);\n    var UVTable = new Array(64);\n    var fdtbl_Y = new Array(64);\n    var fdtbl_UV = new Array(64);\n    var YDC_HT;\n    var UVDC_HT;\n    var YAC_HT;\n    var UVAC_HT;\n\n    var bitcode = new Array(65535);\n    var category = new Array(65535);\n    var outputfDCTQuant = new Array(64);\n    var DU = new Array(64);\n    var byteout = [];\n    var bytenew = 0;\n    var bytepos = 7;\n\n    var YDU = new Array(64);\n    var UDU = new Array(64);\n    var VDU = new Array(64);\n    var clt = new Array(256);\n    var RGB_YUV_TABLE = new Array(2048);\n    var currentQuality;\n\n    var ZigZag = [\n             0, 1, 5, 6,14,15,27,28,\n             2, 4, 7,13,16,26,29,42,\n             3, 8,12,17,25,30,41,43,\n             9,11,18,24,31,40,44,53,\n            10,19,23,32,39,45,52,54,\n            20,22,33,38,46,51,55,60,\n            21,34,37,47,50,56,59,61,\n            35,36,48,49,57,58,62,63\n        ];\n\n    var std_dc_luminance_nrcodes = [0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0];\n    var std_dc_luminance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n    var std_ac_luminance_nrcodes = [0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,0x7d];\n    var std_ac_luminance_values = [\n            0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,\n            0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,\n            0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,\n            0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,\n            0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,\n            0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,\n            0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,\n            0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,\n            0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,\n            0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,\n            0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,\n            0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,\n            0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,\n            0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,\n            0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,\n            0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,\n            0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,\n            0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,\n            0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,\n            0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n            0xf9,0xfa\n        ];\n\n    var std_dc_chrominance_nrcodes = [0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0];\n    var std_dc_chrominance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n    var std_ac_chrominance_nrcodes = [0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,0x77];\n    var std_ac_chrominance_values = [\n            0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,\n            0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,\n            0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,\n            0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,\n            0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,\n            0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,\n            0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,\n            0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,\n            0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,\n            0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,\n            0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,\n            0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,\n            0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,\n            0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,\n            0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,\n            0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,\n            0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,\n            0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,\n            0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,\n            0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n            0xf9,0xfa\n        ];\n\n    function initQuantTables(sf){\n            var YQT = [\n                16, 11, 10, 16, 24, 40, 51, 61,\n                12, 12, 14, 19, 26, 58, 60, 55,\n                14, 13, 16, 24, 40, 57, 69, 56,\n                14, 17, 22, 29, 51, 87, 80, 62,\n                18, 22, 37, 56, 68,109,103, 77,\n                24, 35, 55, 64, 81,104,113, 92,\n                49, 64, 78, 87,103,121,120,101,\n                72, 92, 95, 98,112,100,103, 99\n            ];\n\n            for (var i = 0; i < 64; i++) {\n                var t = ffloor((YQT[i]*sf+50)/100);\n                if (t < 1) {\n                    t = 1;\n                } else if (t > 255) {\n                    t = 255;\n                }\n                YTable[ZigZag[i]] = t;\n            }\n            var UVQT = [\n                17, 18, 24, 47, 99, 99, 99, 99,\n                18, 21, 26, 66, 99, 99, 99, 99,\n                24, 26, 56, 99, 99, 99, 99, 99,\n                47, 66, 99, 99, 99, 99, 99, 99,\n                99, 99, 99, 99, 99, 99, 99, 99,\n                99, 99, 99, 99, 99, 99, 99, 99,\n                99, 99, 99, 99, 99, 99, 99, 99,\n                99, 99, 99, 99, 99, 99, 99, 99\n            ];\n            for (var j = 0; j < 64; j++) {\n                var u = ffloor((UVQT[j]*sf+50)/100);\n                if (u < 1) {\n                    u = 1;\n                } else if (u > 255) {\n                    u = 255;\n                }\n                UVTable[ZigZag[j]] = u;\n            }\n            var aasf = [\n                1.0, 1.387039845, 1.306562965, 1.175875602,\n                1.0, 0.785694958, 0.541196100, 0.275899379\n            ];\n            var k = 0;\n            for (var row = 0; row < 8; row++)\n            {\n                for (var col = 0; col < 8; col++)\n                {\n                    fdtbl_Y[k]  = (1.0 / (YTable [ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n                    fdtbl_UV[k] = (1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n                    k++;\n                }\n            }\n        }\n\n        function computeHuffmanTbl(nrcodes, std_table){\n            var codevalue = 0;\n            var pos_in_table = 0;\n            var HT = new Array();\n            for (var k = 1; k <= 16; k++) {\n                for (var j = 1; j <= nrcodes[k]; j++) {\n                    HT[std_table[pos_in_table]] = [];\n                    HT[std_table[pos_in_table]][0] = codevalue;\n                    HT[std_table[pos_in_table]][1] = k;\n                    pos_in_table++;\n                    codevalue++;\n                }\n                codevalue*=2;\n            }\n            return HT;\n        }\n\n        function initHuffmanTbl()\n        {\n            YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes,std_dc_luminance_values);\n            UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes,std_dc_chrominance_values);\n            YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes,std_ac_luminance_values);\n            UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes,std_ac_chrominance_values);\n        }\n\n        function initCategoryNumber()\n        {\n            var nrlower = 1;\n            var nrupper = 2;\n            for (var cat = 1; cat <= 15; cat++) {\n                //Positive numbers\n                for (var nr = nrlower; nr<nrupper; nr++) {\n                    category[32767+nr] = cat;\n                    bitcode[32767+nr] = [];\n                    bitcode[32767+nr][1] = cat;\n                    bitcode[32767+nr][0] = nr;\n                }\n                //Negative numbers\n                for (var nrneg =-(nrupper-1); nrneg<=-nrlower; nrneg++) {\n                    category[32767+nrneg] = cat;\n                    bitcode[32767+nrneg] = [];\n                    bitcode[32767+nrneg][1] = cat;\n                    bitcode[32767+nrneg][0] = nrupper-1+nrneg;\n                }\n                nrlower <<= 1;\n                nrupper <<= 1;\n            }\n        }\n\n        function initRGBYUVTable() {\n            for(var i = 0; i < 256;i++) {\n                RGB_YUV_TABLE[i]              =  19595 * i;\n                RGB_YUV_TABLE[(i+ 256)>>0]     =  38470 * i;\n                RGB_YUV_TABLE[(i+ 512)>>0]     =   7471 * i + 0x8000;\n                RGB_YUV_TABLE[(i+ 768)>>0]     = -11059 * i;\n                RGB_YUV_TABLE[(i+1024)>>0]     = -21709 * i;\n                RGB_YUV_TABLE[(i+1280)>>0]     =  32768 * i + 0x807FFF;\n                RGB_YUV_TABLE[(i+1536)>>0]     = -27439 * i;\n                RGB_YUV_TABLE[(i+1792)>>0]     = - 5329 * i;\n            }\n        }\n\n        // IO functions\n        function writeBits(bs)\n        {\n            var value = bs[0];\n            var posval = bs[1]-1;\n            while ( posval >= 0 ) {\n                if (value & (1 << posval) ) {\n                    bytenew |= (1 << bytepos);\n                }\n                posval--;\n                bytepos--;\n                if (bytepos < 0) {\n                    if (bytenew == 0xFF) {\n                        writeByte(0xFF);\n                        writeByte(0);\n                    }\n                    else {\n                        writeByte(bytenew);\n                    }\n                    bytepos=7;\n                    bytenew=0;\n                }\n            }\n        }\n\n        function writeByte(value)\n        {\n            byteout.push(clt[value]); // write char directly instead of converting later\n        }\n\n        function writeWord(value)\n        {\n            writeByte((value>>8)&0xFF);\n            writeByte((value   )&0xFF);\n        }\n\n        // DCT & quantization core\n        function fDCTQuant(data, fdtbl)\n        {\n            var d0, d1, d2, d3, d4, d5, d6, d7;\n            /* Pass 1: process rows. */\n            var dataOff=0;\n            var i;\n            const I8 = 8;\n            const I64 = 64;\n            for (i=0; i<I8; ++i)\n            {\n                d0 = data[dataOff];\n                d1 = data[dataOff+1];\n                d2 = data[dataOff+2];\n                d3 = data[dataOff+3];\n                d4 = data[dataOff+4];\n                d5 = data[dataOff+5];\n                d6 = data[dataOff+6];\n                d7 = data[dataOff+7];\n\n                var tmp0 = d0 + d7;\n                var tmp7 = d0 - d7;\n                var tmp1 = d1 + d6;\n                var tmp6 = d1 - d6;\n                var tmp2 = d2 + d5;\n                var tmp5 = d2 - d5;\n                var tmp3 = d3 + d4;\n                var tmp4 = d3 - d4;\n\n                /* Even part */\n                var tmp10 = tmp0 + tmp3;    /* phase 2 */\n                var tmp13 = tmp0 - tmp3;\n                var tmp11 = tmp1 + tmp2;\n                var tmp12 = tmp1 - tmp2;\n\n                data[dataOff] = tmp10 + tmp11; /* phase 3 */\n                data[dataOff+4] = tmp10 - tmp11;\n\n                var z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */\n                data[dataOff+2] = tmp13 + z1; /* phase 5 */\n                data[dataOff+6] = tmp13 - z1;\n\n                /* Odd part */\n                tmp10 = tmp4 + tmp5; /* phase 2 */\n                tmp11 = tmp5 + tmp6;\n                tmp12 = tmp6 + tmp7;\n\n                /* The rotator is modified from fig 4-8 to avoid extra negations. */\n                var z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */\n                var z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */\n                var z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */\n                var z3 = tmp11 * 0.707106781; /* c4 */\n\n                var z11 = tmp7 + z3;    /* phase 5 */\n                var z13 = tmp7 - z3;\n\n                data[dataOff+5] = z13 + z2;    /* phase 6 */\n                data[dataOff+3] = z13 - z2;\n                data[dataOff+1] = z11 + z4;\n                data[dataOff+7] = z11 - z4;\n\n                dataOff += 8; /* advance pointer to next row */\n            }\n\n            /* Pass 2: process columns. */\n            dataOff = 0;\n            for (i=0; i<I8; ++i)\n            {\n                d0 = data[dataOff];\n                d1 = data[dataOff + 8];\n                d2 = data[dataOff + 16];\n                d3 = data[dataOff + 24];\n                d4 = data[dataOff + 32];\n                d5 = data[dataOff + 40];\n                d6 = data[dataOff + 48];\n                d7 = data[dataOff + 56];\n\n                var tmp0p2 = d0 + d7;\n                var tmp7p2 = d0 - d7;\n                var tmp1p2 = d1 + d6;\n                var tmp6p2 = d1 - d6;\n                var tmp2p2 = d2 + d5;\n                var tmp5p2 = d2 - d5;\n                var tmp3p2 = d3 + d4;\n                var tmp4p2 = d3 - d4;\n\n                /* Even part */\n                var tmp10p2 = tmp0p2 + tmp3p2;    /* phase 2 */\n                var tmp13p2 = tmp0p2 - tmp3p2;\n                var tmp11p2 = tmp1p2 + tmp2p2;\n                var tmp12p2 = tmp1p2 - tmp2p2;\n\n                data[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */\n                data[dataOff+32] = tmp10p2 - tmp11p2;\n\n                var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */\n                data[dataOff+16] = tmp13p2 + z1p2; /* phase 5 */\n                data[dataOff+48] = tmp13p2 - z1p2;\n\n                /* Odd part */\n                tmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */\n                tmp11p2 = tmp5p2 + tmp6p2;\n                tmp12p2 = tmp6p2 + tmp7p2;\n\n                /* The rotator is modified from fig 4-8 to avoid extra negations. */\n                var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */\n                var z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */\n                var z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */\n                var z3p2 = tmp11p2 * 0.707106781; /* c4 */\n                var z11p2 = tmp7p2 + z3p2;    /* phase 5 */\n                var z13p2 = tmp7p2 - z3p2;\n\n                data[dataOff+40] = z13p2 + z2p2; /* phase 6 */\n                data[dataOff+24] = z13p2 - z2p2;\n                data[dataOff+ 8] = z11p2 + z4p2;\n                data[dataOff+56] = z11p2 - z4p2;\n\n                dataOff++; /* advance pointer to next column */\n            }\n\n            // Quantize/descale the coefficients\n            var fDCTQuant;\n            for (i=0; i<I64; ++i)\n            {\n                // Apply the quantization and scaling factor & Round to nearest integer\n                fDCTQuant = data[i]*fdtbl[i];\n                outputfDCTQuant[i] = (fDCTQuant > 0.0) ? ((fDCTQuant + 0.5)|0) : ((fDCTQuant - 0.5)|0);\n                //outputfDCTQuant[i] = fround(fDCTQuant);\n\n            }\n            return outputfDCTQuant;\n        }\n\n        function writeAPP0()\n        {\n            writeWord(0xFFE0); // marker\n            writeWord(16); // length\n            writeByte(0x4A); // J\n            writeByte(0x46); // F\n            writeByte(0x49); // I\n            writeByte(0x46); // F\n            writeByte(0); // = \"JFIF\",'\\0'\n            writeByte(1); // versionhi\n            writeByte(1); // versionlo\n            writeByte(0); // xyunits\n            writeWord(1); // xdensity\n            writeWord(1); // ydensity\n            writeByte(0); // thumbnwidth\n            writeByte(0); // thumbnheight\n        }\n\n        function writeSOF0(width, height)\n        {\n            writeWord(0xFFC0); // marker\n            writeWord(17);   // length, truecolor YUV JPG\n            writeByte(8);    // precision\n            writeWord(height);\n            writeWord(width);\n            writeByte(3);    // nrofcomponents\n            writeByte(1);    // IdY\n            writeByte(0x11); // HVY\n            writeByte(0);    // QTY\n            writeByte(2);    // IdU\n            writeByte(0x11); // HVU\n            writeByte(1);    // QTU\n            writeByte(3);    // IdV\n            writeByte(0x11); // HVV\n            writeByte(1);    // QTV\n        }\n\n        function writeDQT()\n        {\n            writeWord(0xFFDB); // marker\n            writeWord(132);       // length\n            writeByte(0);\n            for (var i=0; i<64; i++) {\n                writeByte(YTable[i]);\n            }\n            writeByte(1);\n            for (var j=0; j<64; j++) {\n                writeByte(UVTable[j]);\n            }\n        }\n\n        function writeDHT()\n        {\n            writeWord(0xFFC4); // marker\n            writeWord(0x01A2); // length\n\n            writeByte(0); // HTYDCinfo\n            for (var i=0; i<16; i++) {\n                writeByte(std_dc_luminance_nrcodes[i+1]);\n            }\n            for (var j=0; j<=11; j++) {\n                writeByte(std_dc_luminance_values[j]);\n            }\n\n            writeByte(0x10); // HTYACinfo\n            for (var k=0; k<16; k++) {\n                writeByte(std_ac_luminance_nrcodes[k+1]);\n            }\n            for (var l=0; l<=161; l++) {\n                writeByte(std_ac_luminance_values[l]);\n            }\n\n            writeByte(1); // HTUDCinfo\n            for (var m=0; m<16; m++) {\n                writeByte(std_dc_chrominance_nrcodes[m+1]);\n            }\n            for (var n=0; n<=11; n++) {\n                writeByte(std_dc_chrominance_values[n]);\n            }\n\n            writeByte(0x11); // HTUACinfo\n            for (var o=0; o<16; o++) {\n                writeByte(std_ac_chrominance_nrcodes[o+1]);\n            }\n            for (var p=0; p<=161; p++) {\n                writeByte(std_ac_chrominance_values[p]);\n            }\n        }\n\n        function writeSOS()\n        {\n            writeWord(0xFFDA); // marker\n            writeWord(12); // length\n            writeByte(3); // nrofcomponents\n            writeByte(1); // IdY\n            writeByte(0); // HTY\n            writeByte(2); // IdU\n            writeByte(0x11); // HTU\n            writeByte(3); // IdV\n            writeByte(0x11); // HTV\n            writeByte(0); // Ss\n            writeByte(0x3f); // Se\n            writeByte(0); // Bf\n        }\n\n        function processDU(CDU, fdtbl, DC, HTDC, HTAC){\n            var EOB = HTAC[0x00];\n            var M16zeroes = HTAC[0xF0];\n            var pos;\n            const I16 = 16;\n            const I63 = 63;\n            const I64 = 64;\n            var DU_DCT = fDCTQuant(CDU, fdtbl);\n            //ZigZag reorder\n            for (var j=0;j<I64;++j) {\n                DU[ZigZag[j]]=DU_DCT[j];\n            }\n            var Diff = DU[0] - DC; DC = DU[0];\n            //Encode DC\n            if (Diff==0) {\n                writeBits(HTDC[0]); // Diff might be 0\n            } else {\n                pos = 32767+Diff;\n                writeBits(HTDC[category[pos]]);\n                writeBits(bitcode[pos]);\n            }\n            //Encode ACs\n            var end0pos = 63; // was const... which is crazy\n            for (; (end0pos>0)&&(DU[end0pos]==0); end0pos--) {};\n            //end0pos = first element in reverse order !=0\n            if ( end0pos == 0) {\n                writeBits(EOB);\n                return DC;\n            }\n            var i = 1;\n            var lng;\n            while ( i <= end0pos ) {\n                var startpos = i;\n                for (; (DU[i]==0) && (i<=end0pos); ++i) {}\n                var nrzeroes = i-startpos;\n                if ( nrzeroes >= I16 ) {\n                    lng = nrzeroes>>4;\n                    for (var nrmarker=1; nrmarker <= lng; ++nrmarker)\n                        writeBits(M16zeroes);\n                    nrzeroes = nrzeroes&0xF;\n                }\n                pos = 32767+DU[i];\n                writeBits(HTAC[(nrzeroes<<4)+category[pos]]);\n                writeBits(bitcode[pos]);\n                i++;\n            }\n            if ( end0pos != I63 ) {\n                writeBits(EOB);\n            }\n            return DC;\n        }\n\n        function initCharLookupTable(){\n            var sfcc = String.fromCharCode;\n            for(var i=0; i < 256; i++){ ///// ACHTUNG // 255\n                clt[i] = sfcc(i);\n            }\n        }\n\n        this.encode = function(image,quality,toRaw) // image data object\n        {\n            var time_start = new Date().getTime();\n\n            if(quality) setQuality(quality);\n\n            // Initialize bit writer\n            byteout = new Array();\n            bytenew=0;\n            bytepos=7;\n\n            // Add JPEG headers\n            writeWord(0xFFD8); // SOI\n            writeAPP0();\n            writeDQT();\n            writeSOF0(image.width,image.height);\n            writeDHT();\n            writeSOS();\n\n            // Encode 8x8 macroblocks\n            var DCY=0;\n            var DCU=0;\n            var DCV=0;\n\n            bytenew=0;\n            bytepos=7;\n\n            this.encode.displayName = \"_encode_\";\n\n            var imageData = image.data;\n            var width = image.width;\n            var height = image.height;\n\n            var quadWidth = width*4;\n            var tripleWidth = width*3;\n\n            var x, y = 0;\n            var r, g, b;\n            var start,p, col,row,pos;\n            while(y < height){\n                x = 0;\n                while(x < quadWidth){\n                start = quadWidth * y + x;\n                p = start;\n                col = -1;\n                row = 0;\n\n                for(pos=0; pos < 64; pos++){\n                    row = pos >> 3;// /8\n                    col = ( pos & 7 ) * 4; // %8\n                    p = start + ( row * quadWidth ) + col;\n\n                    if(y+row >= height){ // padding bottom\n                        p-= (quadWidth*(y+1+row-height));\n                    }\n\n                    if(x+col >= quadWidth){ // padding right\n                        p-= ((x+col) - quadWidth +4)\n                    }\n\n                    r = imageData[ p++ ];\n                    g = imageData[ p++ ];\n                    b = imageData[ p++ ];\n\n                    /* // calculate YUV values dynamically\n                    YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80\n                    UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));\n                    VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));\n                    */\n\n                    // use lookup table (slightly faster)\n                    YDU[pos] = ((RGB_YUV_TABLE[r]             + RGB_YUV_TABLE[(g +  256)>>0] + RGB_YUV_TABLE[(b +  512)>>0]) >> 16)-128;\n                    UDU[pos] = ((RGB_YUV_TABLE[(r +  768)>>0] + RGB_YUV_TABLE[(g + 1024)>>0] + RGB_YUV_TABLE[(b + 1280)>>0]) >> 16)-128;\n                    VDU[pos] = ((RGB_YUV_TABLE[(r + 1280)>>0] + RGB_YUV_TABLE[(g + 1536)>>0] + RGB_YUV_TABLE[(b + 1792)>>0]) >> 16)-128;\n\n                }\n\n                DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);\n                DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);\n                DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);\n                x+=32;\n                }\n                y+=8;\n            }\n\n            ////////////////////////////////////////////////////////////////\n\n            // Do the bit alignment of the EOI marker\n            if ( bytepos >= 0 ) {\n                var fillbits = [];\n                fillbits[1] = bytepos+1;\n                fillbits[0] = (1<<(bytepos+1))-1;\n                writeBits(fillbits);\n            }\n\n            writeWord(0xFFD9); //EOI\n\n            if(toRaw) {\n                var len = byteout.length;\n                var data = new Uint8Array(len);\n\n                for (var i=0; i<len; i++ ) {\n                    data[i] = byteout[i].charCodeAt();\n                }\n\n                //cleanup\n                byteout = [];\n\n                // benchmarking\n                var duration = new Date().getTime() - time_start;\n                console.log('Encoding time: '+ duration + 'ms');\n\n                return data;\n            }\n\n            var jpegDataUri = 'data:image/jpeg;base64,' + btoa(byteout.join(''));\n\n            byteout = [];\n\n            // benchmarking\n            var duration = new Date().getTime() - time_start;\n            console.log('Encoding time: '+ duration + 'ms');\n\n            return jpegDataUri\n    }\n\n    function setQuality(quality){\n        if (quality <= 0) {\n            quality = 1;\n        }\n        if (quality > 100) {\n            quality = 100;\n        }\n\n        if(currentQuality == quality) return // don't recalc if unchanged\n\n        var sf = 0;\n        if (quality < 50) {\n            sf = Math.floor(5000 / quality);\n        } else {\n            sf = Math.floor(200 - quality*2);\n        }\n\n        initQuantTables(sf);\n        currentQuality = quality;\n        console.log('Quality set to: '+quality +'%');\n    }\n\n    function init(){\n        var time_start = new Date().getTime();\n        if(!quality) quality = 50;\n        // Create tables\n        initCharLookupTable()\n        initHuffmanTbl();\n        initCategoryNumber();\n        initRGBYUVTable();\n\n        setQuality(quality);\n        var duration = new Date().getTime() - time_start;\n        console.log('Initialization '+ duration + 'ms');\n    }\n\n    init();\n\n};\n\n/* Example usage. Quality is an int in the range [0, 100]\nfunction example(quality){\n    // Pass in an existing image from the page\n    var theImg = document.getElementById('testimage');\n    // Use a canvas to extract the raw image data\n    var cvs = document.createElement('canvas');\n    cvs.width = theImg.width;\n    cvs.height = theImg.height;\n    var ctx = cvs.getContext(\"2d\");\n    ctx.drawImage(theImg,0,0);\n    var theImgData = (ctx.getImageData(0, 0, cvs.width, cvs.height));\n    // Encode the image and get a URI back, toRaw is false by default\n    var jpegURI = encoder.encode(theImgData, quality);\n    var img = document.createElement('img');\n    img.src = jpegURI;\n    document.body.appendChild(img);\n}\n\nExample usage for getting back raw data and transforming it to a blob.\nRaw data is useful when trying to send an image over XHR or Websocket,\nit uses around 30% less bytes then a Base64 encoded string. It can\nalso be useful if you want to save the image to disk using a FileWriter.\n\nNOTE: The browser you are using must support Blobs\nfunction example(quality){\n    // Pass in an existing image from the page\n    var theImg = document.getElementById('testimage');\n    // Use a canvas to extract the raw image data\n    var cvs = document.createElement('canvas');\n    cvs.width = theImg.width;\n    cvs.height = theImg.height;\n    var ctx = cvs.getContext(\"2d\");\n    ctx.drawImage(theImg,0,0);\n    var theImgData = (ctx.getImageData(0, 0, cvs.width, cvs.height));\n    // Encode the image and get a URI back, set toRaw to true\n    var rawData = encoder.encode(theImgData, quality, true);\n\n    blob = new Blob([rawData.buffer], {type: 'image/jpeg'});\n    var jpegURI = URL.createObjectURL(blob);\n\n    var img = document.createElement('img');\n    img.src = jpegURI;\n    document.body.appendChild(img);\n}*/\n\ndefine([], function() { return JPEGEncoder; });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.0.1.3@html5-image-compress/src/libs/jpeg_encoder_basic.js\n// module id = 696\n// module chunks = 2"],"sourceRoot":""}